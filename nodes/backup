## https://blender.stackexchange.com/questions/67487/cycles-materials-math-node-with-more-than-two-inputs

import bpy
from nodeitems_utils import NodeCategory, NodeItem
from . utils_colorramp import ColorRamp
import importlib

node_group_name = "NodeTree"

# def _update_colorramp(self):
    
core_colorramp = ColorRamp()

def update_colorramp(self, context):
    cmap_steps = self.n_stops
    selected_cmap = self.colormaps.split('.')

    core_colorramp.update_colormap(selected_cmap,cmap_steps)

class BLENDERNC_CMAPS_NT_node(bpy.types.Node):
    # === Basics ===
    # Description string
    '''A cmaps node'''
    # Optional identifier string. If not explicitly defined, the python class name is used.
    bl_idname = 'cmapsNode'
    # Label for nice name display
    bl_label = "Colormap"
    # Icon identifier
    bl_icon = 'SOUND'
    blb_type = "Blendernc"

    vmin: bpy.props.FloatProperty(
         default=0,
         name="vmin",
         update=update_colorramp,
    )

    vmax: bpy.props.FloatProperty(
        default=1,
        name="vmax",
        update=update_colorramp,
    )

    colormaps: bpy.props.EnumProperty(
        items=core_colorramp.get_colormaps(),
        name="",
        update=update_colorramp,
    )

    value: bpy.props.FloatProperty(
        name='Value', 
        description='Input value(s)',
        default=.5
    )

    n_stops: bpy.props.IntProperty(
        name='# of stops', 
        description='Number of color stops',
        default=4,
        min=4,
        max=16,
        update=update_colorramp,
    )

    def init(self,context):
        _ = core_colorramp.get_valid_evaluate_function(node_group_name, self._get_color_ramp_node_name())

        self.inputs.new('NodeSocketColor', name='Color')
        self.outputs.new('NodeSocketColor', name='Color')
        self.width = 250
        #self.show_preview = True

    def copy(self, node):
        print("Copying from node ", node)


    def draw_buttons(self, context, layout):
        m = bpy.data.node_groups.get(node_group_name)
        layout.prop(self, "colormaps")
        layout.prop(self, "n_stops")
        tnode = m.nodes[self._get_color_ramp_node_name()]

        layout.template_color_ramp(tnode, "color_ramp", expand=True)

        row=layout.row()
        row.prop(self, "vmin")
        row.prop(self, "vmax")

    def free(self):
        m = bpy.data.node_groups.get(node_group_name)
        node = m.nodes[self._get_color_ramp_node_name()]
        m.nodes.remove(node)

    def update(self):
        color_input = self.inputs
        color_output = self.outputs

        #TO_DO set up default map
        if color_input.items() and color_output.items():
            print(color_output[0].is_linked, not color_input[0].is_linked)
            if color_output[0].is_linked and not color_input[0].is_linked:
                print("output linked, not input linked")
                self.outputs[0].links[0].to_socket.default_value = self.inputs[0].default_value
            elif color_output[0].is_linked and color_input[0].is_linked and self.inputs[0].links:
                ## Compute more
                print("output linked, input linked")
                self.outputs[0].links[0].to_socket.default_value = self.inputs[0].links[0].from_socket.default_value
            else:
                pass
            # Try "bpy.data.materials['Material'].node_tree.inputs"
        
        
        # try:
            
            
        # except (AttributeError, IndexError):
        #     return
        
        ##### CHECK to_socket from other properties
        
    
    def _get_color_ramp_node_name(self):
        n_split = self.name.split('.')
        if len(n_split) == 1:
            n_id="000"
        else:
            n_id=n_split[-1]
        return 'Color_Ramp'+"."+n_id    
    
    # def update(self):

    #     if not self.inputs:
    #         pass
    #     elif not self.inputs[0].is_linked:
    #         pass
    #     else:
    #         #self.outputs[0].default_value
    #         self.inputs[0].default_value = self.inputs[0].links[0].from_node.outputs[0].node.color
    #         bpy.data.materials['Material'].node_tree.nodes['Math']
    #         #self.inputs[0].links[0].from_socket.default_value
        
    #     ## Do something similar for input UP
    #     if not self.outputs:
    #         pass
    #     elif not self.outputs[0].is_linked:
    #         pass
    #     else:
    #         pass
    #         #self.outputs[0].default_value
    #         #self.outputs[0].links[0].to_socket.default_value = self.inputs[0].default_value



class BLENDERNC_NodeCategory(NodeCategory):
    @classmethod
    def poll(cls, context):
        return context.space_data.tree_type == "ShaderNodeTree"


# all categories in a list
node_categories = [
    # identifier, label, items list
    BLENDERNC_NodeCategory('Blendernc', "Blendernc", items=[
        # our basic node
        NodeItem("cmapsNode"),
    ])
]



# Node Authors: Secrop, Rich Sedman
# Node Description: Dynamic Maths node with variable number of inputs
# version: (0,0,1)

import bpy

# for blender2.80 we should derive the class from bpy.types.ShaderNodeCustomGroup
class MathsDynamic(bpy.types.NodeCustomGroup):

    bl_name='MathsDynamic'
    bl_label='Dynamic Maths'

    # Return the list of valid operators
    def operators(self, context):
        nt=context.space_data.edit_tree
        list=[('ADD','Add','Addition'),('SUBTRACT', 'Subtract', 'Subtraction'), ('MULTIPLY', 'Multiply', 'Multiplication'), ('DIVIDE', 'Divide', 'Division'), ('MAXIMUM','Max','Maximum'),('MINIMUM','Min','Minimum') ]
        return list            

    # Manage the node's sockets, adding additional ones when needed and removing those no longer required
    def __nodeinterface_setup__(self):

        # No operators --> no inpout or output sockets
        if self.inputSockets < 1:
            self.node_tree.inputs.clear()
            self.node_tree.outputs.clear()

            return

        # Look for input sockets that are no longer required and remove them
        for i in range(len(self.node_tree.inputs),0,-1):
            if i > self.inputSockets:
                self.node_tree.inputs.remove(self.node_tree.inputs[-1])

        # Add any additional input sockets that are now required
        for i in range(0, self.inputSockets):
            if i > len(self.node_tree.inputs):
                self.node_tree.inputs.new("NodeSocketFloat", "Value")

        # Add the output socket
        if len(self.node_tree.outputs) < 1:
            self.node_tree.outputs.new("NodeSocketFloat", "Value")

    # Manage the internal nodes to perform the chained operation - clear all the nodes and build from scratch each time.
    def __nodetree_setup__(self):

        # Remove all links and all nodes that aren't Group Input or Group Output
        self.node_tree.links.clear()
        for node in self.node_tree.nodes:
            if not node.name in ['Group Input','Group Output']:
                self.node_tree.nodes.remove(node)

        # Start from Group Input and add nodes as required, chaining each new one to the previous level and the next input
        groupinput = self.node_tree.nodes['Group Input']
        previousnode = groupinput
        if self.inputSockets <= 1:
            # Special case <= 1 input --> link input directly to output
            self.node_tree.links.new(previousnode.outputs[0],self.node_tree.nodes['Group Output'].inputs[0])
        else:
            # Create one node for each input socket > 1
            for i in range(1, self.inputSockets):
                newnode = self.node_tree.nodes.new('ShaderNodeMath')
                newnode.operation = self.selectOperator
                self.node_tree.links.new(previousnode.outputs[0],newnode.inputs[0])
                self.node_tree.links.new(groupinput.outputs[i],newnode.inputs[1])
                previousnode = newnode

            # Connect the last one to the output
            self.node_tree.links.new(previousnode.outputs[0],self.node_tree.nodes['Group Output'].inputs[0])

    # Chosen operator has changed - update the nodes and links
    def update_operator(self, context):
        self.__nodeinterface_setup__()
        self.__nodetree_setup__()

    # Number of inputs has changed - update the nodes and links
    def update_inpSockets(self, context):
        self.__nodeinterface_setup__()
        self.__nodetree_setup__()

    # The node properties - Operator (Add, Subtract, etc.) and number of input sockets
    # for blender 2.80, the following properties should be annotations
    selectOperator=bpy.props.EnumProperty(name="selectOperator", items=operators, update=update_operator)    
    inputSockets=bpy.props.IntProperty(name="Inputs", min=0, max=63, default=0, update=update_inpSockets)

    # Setup the node - setup the node tree and add the group Input and Output nodes
    def init(self, context):
        self.node_tree=bpy.data.node_groups.new('.' + self.bl_name, 'ShaderNodeTree')
        self.node_tree.nodes.new('NodeGroupInput')
        self.node_tree.nodes.new('NodeGroupOutput') 

    # Draw the node components
    def draw_buttons(self, context, layout):
        row=layout.row()
        row.alert=(self.selectOperator=='None')
        row.prop(self, 'selectOperator', text='')
        row=layout.row()
        row.prop(self, 'inputSockets', text='Inputs')

    # Copy
    def copy(self, node):
        self.node_tree=node.node_tree.copy()

    # Free (when node is deleted)
    def free(self):
        bpy.data.node_groups.remove(self.node_tree, do_unlink=True)

from nodeitems_utils import NodeItem, register_node_categories, unregister_node_categories
# in blender2.80 use ShaderNodeCategory
from nodeitems_builtins import ShaderNodeCategory

def register():
    bpy.utils.register_class(MathsDynamic)
    newcatlist = [ShaderNodeCategory("SH_NEW_CUSTOM", "Custom Nodes", items=[NodeItem("MathsDynamic"),]),]
    register_node_categories("CUSTOM_NODES", newcatlist)

def unregister():
    unregister_node_categories("CUSTOM_NODES")
    bpy.utils.unregister_class(MathsDynamic)

# Attempt to unregister our class (in case it's already been registered before) and register it.
try :
    unregister()
except:
    pass
register() 